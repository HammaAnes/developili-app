Last login: Sun Oct 20 21:08:43 on ttys030
╭─░▒▓    ~ ────────────────────────────────────────── ✔  21:18:36  ▓▒░─╮
╰─ cd /Users/mohamedouadahi/Downloads/NIT/test-git/test                      ─╯

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:18:42  ▓▒░─╮
╰─ git branch copy                                                           ─╯

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:18:57  ▓▒░─╮
╰─ git branch                                                                ─╯

╭─░▒▓    ~/Dow/N/test-git/test    master ─ ✔  56s   21:20:01  ▓▒░─╮
╰─ git checkout copy                                                         ─╯

Basculement sur la branche 'copy'

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─── ✔  21:20:42  ▓▒░─╮
╰─ git log                                                                   ─╯

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─── ✔  21:20:59  ▓▒░─╮
╰─ git log                                                                   ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test    copy ── ✔  5s   21:21:54  ▓▒░─╮
╰─  c7a719adb8ea05c747b0effa0ec0c19a60c08463                                 ─╯
zsh: command not found: c7a719adb8ea05c747b0effa0ec0c19a60c08463

╭─░▒▓    ~/Dow/NIT/test-git/test    copy ───── 127 ✘  21:21:56  ▓▒░─╮
╰─ git  c7a719adb8ea05c747b0effa0ec0c19a60c08463                             ─╯
git : 'c7a719adb8ea05c747b0effa0ec0c19a60c08463' n'est pas une commande git. Voir 'git --help'.

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─ 1 ✘  21:22:00  ▓▒░─╮
╰─ git log                                                                   ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test    copy ── ✔  3s   21:22:30  ▓▒░─╮
╰─ git log commit c7a719adb8ea05c747b0effa0ec0c19a60c08463                   ─╯
fatal : argument 'commit' ambigu : révision inconnue ou chemin inexistant.
Utilisez '--' pour séparer les chemins des révisions, comme ceci :
'git <commande> [<révision>...] -- [<chemin>...]'

╭─░▒▓    ~/Dow/NIT/test-git/test    copy ───── 128 ✘  21:22:34  ▓▒░─╮
╰─ git checkout <c7a719adb8ea05c747b0effa0ec0c19a60c08463>                   ─╯
zsh: parse error near `\n'

╭─░▒▓    ~/Dow/NIT/test-git/test    copy ───── 128 ✘  21:27:32  ▓▒░─╮
╰─ git log                                                                   ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test    copy ── ✔  4s   21:27:42  ▓▒░─╮
╰─ git checkout <commit c7a719adb8ea05c747b0effa0ec0c19a60c08463>            ─╯
zsh: parse error near `\n'

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─ 1 ✘  21:27:57  ▓▒░─╮
╰─ git checkout<commit c7a719adb8ea05c747b0effa0ec0c19a60c08463>             ─╯
zsh: parse error near `\n'

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─ 1 ✘  21:28:08  ▓▒░─╮
╰─ git merge copy                                                            ─╯
Déjà à jour.

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─── ✔  21:28:49  ▓▒░─╮
╰─ git log                                                                   ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test    copy ── ✔  6s   21:30:22  ▓▒░─╮
╰─ git checkout<commit-c7a719adb8ea05c747b0effa0ec0c19a60c08463>             ─╯
zsh: parse error near `\n'

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─ 1 ✘  21:30:44  ▓▒░─╮
╰─ git checkout commit-c7a719adb8ea05c747b0effa0ec0c19a60c08463              ─╯
erreur : le spécificateur de chemin 'commit-c7a719adb8ea05c747b0effa0ec0c19a60c08463' ne correspond à aucun fichier connu de git

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─ 1 ✘  21:31:07  ▓▒░─╮
╰─ git checkout c7a719adb8ea05c747b0effa0ec0c19a60c08463                     ─╯
Note : basculement sur 'c7a719adb8ea05c747b0effa0ec0c19a60c08463'.

Vous êtes dans l'état « HEAD détachée ». Vous pouvez visiter, faire des modifications
expérimentales et les valider. Il vous suffit de faire un autre basculement pour
abandonner les commits que vous faites dans cet état sans impacter les autres branches

Si vous voulez créer une nouvelle branche pour conserver les commits que vous créez,
il vous suffit d'utiliser l'option -c de la commande switch comme ceci :

  git switch -c <nom-de-la-nouvelle-branche>

Ou annuler cette opération avec :

  git switch -

Désactivez ce conseil en renseignant la variable de configuration advice.detachedHead à false

HEAD est maintenant sur c7a719a 3mrt l fichier html

╭─░▒▓    ~/Dow/NIT/test-git/test   @c7a719ad ────── ✔  21:31:21  ▓▒░─╮
╰─ git log                                                                   ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test   @c7a719ad ────── ✔  21:32:09  ▓▒░─╮
╰─ git branch                                                                ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test   @c7a719ad ────── ✔  21:32:26  ▓▒░─╮
╰─ git branch                                                                ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test   @c7a719ad ────── ✔  21:32:38  ▓▒░─╮
╰─ git branch copy                                                           ─╯
fatal : Une branche nommée 'copy' existe déjà

╭─░▒▓    ~/Dow/NIT/test-git/test   @c7a719ad ── 128 ✘  21:32:41  ▓▒░─╮
╰─ git checkout main                                                         ─╯
erreur : le spécificateur de chemin 'main' ne correspond à aucun fichier connu de git

╭─░▒▓    ~/Dow/NIT/test-git/test   @c7a719ad ──── 1 ✘  21:32:59  ▓▒░─╮
╰─ git checkout main                                                         ─╯
erreur : le spécificateur de chemin 'main' ne correspond à aucun fichier connu de git

╭─░▒▓    ~/Dow/NIT/test-git/test   @c7a719ad ──── 1 ✘  21:33:17  ▓▒░─╮
╰─ git branch                                                                ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test   @c7a719ad ────── ✔  21:33:51  ▓▒░─╮
╰─ git checkout master                                                       ─╯
Basculement sur la branche 'master'

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:33:56  ▓▒░─╮
╰─ git merge copy                                                            ─╯
Déjà à jour.

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:34:41  ▓▒░─╮
╰─ git status                                                                ─╯
Sur la branche master
rien à valider, la copie de travail est propre

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:35:09  ▓▒░─╮
╰─ git checkout copy                                                         ─╯
Basculement sur la branche 'copy'

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─── ✔  21:35:26  ▓▒░─╮
╰─ ls                                                                        ─╯
index.html style.css

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─── ✔  21:35:29  ▓▒░─╮
╰─ git status                                                                ─╯
Sur la branche copy
Modifications qui ne seront pas validées :
  (utilisez "git add <fichier>..." pour mettre à jour ce qui sera validé)
  (utilisez "git restore <fichier>..." pour annuler les modifications dans le répertoire de travail)
	modifié :         index.html

aucune modification n'a été ajoutée à la validation (utilisez "git add" ou "git commit -a")

╭─░▒▓    ~/Dow/NIT/test-git/test    copy !1 ────── ✔  21:36:00  ▓▒░─╮
╰─ git checkout master                                                       ─╯
M	index.html
Basculement sur la branche 'master'

╭─░▒▓    ~/Dow/NIT/test-git/test    master !1 ──── ✔  21:36:13  ▓▒░─╮
╰─ git merge copy                                                            ─╯
Déjà à jour.

╭─░▒▓    ~/Dow/NIT/test-git/test    master !1 ──── ✔  21:36:21  ▓▒░─╮
╰─ git checkout master                                                       ─╯
M	index.html
Déjà sur 'master'

╭─░▒▓    ~/Dow/NIT/test-git/test    master !1 ──── ✔  21:36:32  ▓▒░─╮
╰─ git checkout copy                                                         ─╯
M	index.html
Basculement sur la branche 'copy'

╭─░▒▓    ~/Dow/NIT/test-git/test    copy !1 ────── ✔  21:36:41  ▓▒░─╮
╰─ git add index.html                                                        ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test    copy +1 ────── ✔  21:36:48  ▓▒░─╮
╰─ git commit -m "modifiyit bach n meurgi "                                  ─╯
[copy 82d5bef] modifiyit bach n meurgi
 1 file changed, 1 insertion(+), 1 deletion(-)

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─── ✔  21:37:13  ▓▒░─╮
╰─ git checkout master                                                       ─╯
Basculement sur la branche 'master'

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:37:22  ▓▒░─╮
╰─ git log                                                                   ─╯

╭─░▒▓    ~/Dow/N/test-git/test    master ── ✔  4s   21:39:20  ▓▒░─╮
╰─ git checkout 8be82ba8dd76ae746eb40d097e6d2505b08d85ae                     ─╯
Note : basculement sur '8be82ba8dd76ae746eb40d097e6d2505b08d85ae'.

Vous êtes dans l'état « HEAD détachée ». Vous pouvez visiter, faire des modifications
expérimentales et les valider. Il vous suffit de faire un autre basculement pour
abandonner les commits que vous faites dans cet état sans impacter les autres branches

Si vous voulez créer une nouvelle branche pour conserver les commits que vous créez,
il vous suffit d'utiliser l'option -c de la commande switch comme ceci :

  git switch -c <nom-de-la-nouvelle-branche>

Ou annuler cette opération avec :

  git switch -

Désactivez ce conseil en renseignant la variable de configuration advice.detachedHead à false

HEAD est maintenant sur 8be82ba ani comitit

╭─░▒▓    ~/Dow/NIT/test-git/test   @8be82ba8 ────── ✔  21:39:28  ▓▒░─╮
╰─ git status                                                                ─╯
HEAD détachée sur 8be82ba
Merge branch 'copy' into HEAD









 fusionne une branche amont mise à jour dans une branche de sujet.






~
~
~
~
~
~
~
~
:.!q
shell returned 127

Press ENTER or type command to continue
Modifications qui ne seront pas validées :
  (utilisez "git add <fichier>..." pour mettre à jour ce qui sera validé)
  (utilisez "git restore <fichier>..." pour annuler les modifications dans le répertoire de travail)
	modifié :         style.css

aucune modification n'a été ajoutée à la validation (utilisez "git add" ou "git commit -a")

╭─░▒▓    ~/Dow/NIT/test-git/test   @8be82ba8 !1 ─── ✔  21:40:07  ▓▒░─╮
╰─ git add style.css                                                         ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test   @8be82ba8 +1 ─── ✔  21:41:01  ▓▒░─╮
╰─ git commit -m "modifyit css"                                              ─╯
[HEAD détachée ed30e4c] modifyit css
 1 file changed, 5 insertions(+)

╭─░▒▓    ~/Dow/NIT/test-git/test   @ed30e4ce ────── ✔  21:41:16  ▓▒░─╮
╰─ git status                                                                ─╯
HEAD détachée depuis 8be82ba
rien à valider, la copie de travail est propre

╭─░▒▓    ~/Dow/NIT/test-git/test   @ed30e4ce ────── ✔  21:41:19  ▓▒░─╮
╰─ git merge copy                                                            ─╯
suggestion : en attente de la fermeture du fichier par votre éditeur de texte… erreur : There was a problem with the editor 'vi'.
Pas de validation de la fusion ; utilisez 'git commit' pour terminer la fusion.

╭─░▒▓    ~/Dow/N/t/test   @ed30e4ce merge +1 
╰─ git status                                                                ─╯
HEAD détachée depuis 8be82ba
Tous les conflits sont réglés mais la fusion n'est pas terminée.
  (utilisez "git commit" pour terminer la fusion)

Modifications qui seront validées :
	modifié :         index.html


╭─░▒▓    ~/Dow/N/t/test   @ed30e4ce merge +1 ────── ✔  21:46:24  ▓▒░─╮
╰─ git commit -m "modifyit css"                                              ─╯
[HEAD détachée 0a4cd60] modifyit css

╭─░▒▓    ~/Dow/NIT/test-git/test   @0a4cd60e ────── ✔  21:46:31  ▓▒░─╮
╰─ git checkout master                                                       ─╯
Attention : vous abandonnez 2 commits, non connectés à
une branche :

  0a4cd60 modifyit css
  ed30e4c modifyit css

Si vous souhaitez les garder en créant une nouvelle branche, c'est le bon moment
pour le faire avec :

git branch <nouvelle-branche> 0a4cd60

Basculement sur la branche 'master'

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:46:47  ▓▒░─╮
╰─ git commit -m "modifyit css"                                              ─╯
Sur la branche master
rien à valider, la copie de travail est propre

╭─░▒▓    ~/Dow/NIT/test-git/test    master ───── 1 ✘  21:46:49  ▓▒░─╮
╰─ git merge copy                                                            ─╯
Mise à jour c7a719a..82d5bef
Fast-forward
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:46:56  ▓▒░─╮
╰─ git status                                                                ─╯
Sur la branche master
rien à valider, la copie de travail est propre

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:47:06  ▓▒░─╮
╰─ git merge copy                                                            ─╯
Déjà à jour.

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:57:00  ▓▒░─╮
╰─ git checkout copy                                                         ─╯
Basculement sur la branche 'copy'

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─── ✔  21:57:18  ▓▒░─╮
╰─ git status                                                                ─╯
Sur la branche copy
Modifications qui ne seront pas validées :
  (utilisez "git add <fichier>..." pour mettre à jour ce qui sera validé)
  (utilisez "git restore <fichier>..." pour annuler les modifications dans le répertoire de travail)
	modifié :         style.css

aucune modification n'a été ajoutée à la validation (utilisez "git add" ou "git commit -a")

╭─░▒▓    ~/Dow/NIT/test-git/test    copy !1 ────── ✔  21:57:45  ▓▒░─╮
╰─ git add style.css                                                         ─╯

╭─░▒▓    ~/Dow/NIT/test-git/test    copy +1 ────── ✔  21:57:50  ▓▒░─╮
╰─ git commit -m "modifyit css pou la deuxieme fois"                         ─╯
[copy 51a6d80] modifyit css pou la deuxieme fois
 1 file changed, 3 insertions(+)

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─── ✔  21:59:26  ▓▒░─╮
╰─ git status                                                                ─╯
Sur la branche copy
rien à valider, la copie de travail est propre

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─── ✔  21:59:34  ▓▒░─╮
╰─ git checkout master                                                       ─╯
Basculement sur la branche 'master'

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  21:59:42  ▓▒░─╮
╰─ git merge copy                                                            ─╯
Mise à jour 82d5bef..51a6d80
Fast-forward
 style.css | 3 +++
 1 file changed, 3 insertions(+)

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  22:00:09  ▓▒░─╮
╰─ git remote -v                                                             ─╯

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  22:15:16  ▓▒░─╮
╰─ git remote add origine https://github.com/swika1\?tab\=repositories       ─╯

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  22:17:03  ▓▒░─╮
╰─ git push origin main                                                      ─╯
erreur : le spécificateur de référence source main ne correspond à aucune référence
erreur : impossible de pousser des références vers 'origin'

╭─░▒▓    ~/Dow/NIT/test-git/test    master ───── 1 ✘  22:17:27  ▓▒░─╮
╰─ git push origin master                                                    ─╯
fatal : 'origin' does not appear to be a git repository
fatal : Impossible de lire le dépôt distant.

Veuillez vérifier que vous avez les droits d'accès
et que le dépôt existe.

╭─░▒▓    ~/Dow/NIT/test-git/test    master ─── 128 ✘  22:17:31  ▓▒░─╮
╰─ git push origine master                                                   ─╯
fatal : https://github.com/swika1?tab=repositories/info/refs n'est pas valide : est-ce bien un dépôt git ?

╭─░▒▓    ~/Dow/NIT/test-git/test    master ─── 128 ✘  22:17:42  ▓▒░─╮
╰─ git push origin master                                                    ─╯
fatal : 'origin' does not appear to be a git repository
fatal : Impossible de lire le dépôt distant.

Veuillez vérifier que vous avez les droits d'accès
et que le dépôt existe.

╭─░▒▓    ~/Dow/NIT/test-git/test    master ─── 128 ✘  22:17:51  ▓▒░─╮
╰─ ls                                                                        ─╯
index.html style.css

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  22:17:56  ▓▒░─╮
╰─ git remote add origine https://github.com/swika1/desktop-tutorial.git     ─╯
erreur : la distante origine existe déjà.

╭─░▒▓    ~/Dow/NIT/test-git/test    master ───── 3 ✘  22:25:40  ▓▒░─╮
╰─ git push -u master                                                        ─╯
fatal : 'master' does not appear to be a git repository
fatal : Impossible de lire le dépôt distant.

Veuillez vérifier que vous avez les droits d'accès
et que le dépôt existe.

╭─░▒▓    ~/Dow/NIT/test-git/test    master ─── 128 ✘  22:26:49  ▓▒░─╮
╰─ git status                                                                ─╯
Sur la branche master
rien à valider, la copie de travail est propre

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  22:27:15  ▓▒░─╮
╰─ git remote add origine https://github.com/swika1/test.git                 ─╯
erreur : la distante origine existe déjà.

╭─░▒▓    ~/Dow/NIT/test-git/test    master ───── 3 ✘  22:28:45  ▓▒░─╮
╰─ git remote -v                                                             ─╯
origine	https://github.com/swika1?tab=repositories (fetch)
origine	https://github.com/swika1?tab=repositories (push)

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  22:29:07  ▓▒░─╮
╰─ git remote set-url origin https://github.com/swika1/test.git              ─╯
erreur : Pas de serveur remote 'origin'

╭─░▒▓    ~/Dow/NIT/test-git/test    master ───── 2 ✘  22:29:32  ▓▒░─╮
╰─ git remote remove origin                                                  ─╯
erreur : Pas de serveur remote : 'origin'

╭─░▒▓    ~/Dow/NIT/test-git/test    master ───── 2 ✘  22:30:08  ▓▒░─╮
╰─ git remote -v                                                             ─╯
origine	https://github.com/swika1?tab=repositories (fetch)
origine	https://github.com/swika1?tab=repositories (push)

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  22:30:46  ▓▒░─╮
╰─ cd ..                                                                     ─╯

╭─░▒▓    ~/Downloads/NIT/test-git ─────────────────── ✔  22:31:18  ▓▒░─╮
╰─ git remote -v                                                             ─╯
fatal : ni ceci ni aucun de ses répertoires parents n'est un dépôt git : .git

╭─░▒▓    ~/Downloads/NIT/test-git ─────────────── 128 ✘  22:31:47  ▓▒░─╮
╰─ ls                                                                        ─╯
test

╭─░▒▓    ~/Downloads/NIT/test-git ─────────────────── ✔  22:34:33  ▓▒░─╮
╰─ cd test                                                                   ─╯

╭─░▒▓    ~/Downloads/NIT/test-git/test    master ─ ✔  22:34:36  ▓▒░─╮
╰─ git remote add origin https://github.com/swika1/test.git                  ─╯
git branch -M main
git push -u origin main
Énumération des objets: 12, fait.
Décompte des objets: 100% (12/12), fait.
Compression par delta en utilisant jusqu'à 10 fils d'exécution
Compression des objets: 100% (10/10), fait.
Écriture des objets: 100% (12/12), 1.30 Kio | 1.30 Mio/s, fait.
Total 12 (delta 2), réutilisés 0 (delta 0), réutilisés du pack 0
remote: Resolving deltas: 100% (2/2), done.
To https://github.com/swika1/test.git
 * [new branch]      main -> main
la branche 'main' est paramétrée pour suivre 'origin/main'.

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─── ✔  22:34:40  ▓▒░─╮
╰─ git remote remove origin                                                  ─╯

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─── ✔  22:36:04  ▓▒░─╮
╰─ git remote add origin https://github.com/swika1/test.git                  ─╯
git branch -M main
git push -u origin main
usage : git remote add [<options>] <nom> <URL>

    -f, --[no-]fetch      rapatrier les branches distantes
    --[no-]tags           importer toutes les étiquettes et les objets associés lors de la récupération
                          ou ne récupérer aucune étiquette (--no-tags)
    -t, --[no-]track <branche>
                          branche(s) à suivre
    -m, --[no-]master <branche>
                          branche maîtresse
    --[no-]mirror[=(push|fetch)]
                          paramétrer la distante comme miroir pour pousser ou pour rapatrier depuis

fatal : 'origin' does not appear to be a git repository
fatal : Impossible de lire le dépôt distant.

Veuillez vérifier que vous avez les droits d'accès
et que le dépôt existe.

╭─░▒▓    ~/Dow/NIT/test-git/test    main ───── 128 ✘  22:36:16  ▓▒░─╮
╰─ git remote add origin https://github.com/swika1/test.git                  ─
usage : git remote add [<options>] <nom> <URL>

    -f, --[no-]fetch      rapatrier les branches distantes
    --[no-]tags           importer toutes les étiquettes et les objets associés lors de la récupération
                          ou ne récupérer aucune étiquette (--no-tags)
    -t, --[no-]track <branche>
                          branche(s) à suivre
    -m, --[no-]master <branche>
                          branche maîtresse
    --[no-]mirror[=(push|fetch)]
                          paramétrer la distante comme miroir pour pousser ou pour rapatrier depuis


╭─░▒▓    ~/Dow/NIT/test-git/test    main ───── HUP ✘  22:36:33  ▓▒░─╮
╰─ git push -u origine main                                                  ─╯
fatal : https://github.com/swika1?tab=repositories/info/refs n'est pas valide : est-ce bien un dépôt git ?

╭─░▒▓    ~/Dow/NIT/test-git/test    main ───── 128 ✘  22:36:59  ▓▒░─╮
╰─ git remote -v                                                             ─╯
origine	https://github.com/swika1?tab=repositories (fetch)
origine	https://github.com/swika1?tab=repositories (push)

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─── ✔  22:37:40  ▓▒░─╮
╰─ git remote add origine https://github.com/swika1/test.git                 ─╯
erreur : la distante origine existe déjà.

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─ 3 ✘  22:38:06  ▓▒░─╮
╰─ git push -u origine main                                                  ─╯
fatal : https://github.com/swika1?tab=repositories/info/refs n'est pas valide : est-ce bien un dépôt git ?

╭─░▒▓    ~/Dow/NIT/test-git/test    main ───── 128 ✘  22:38:15  ▓▒░─╮
╰─ git push -u origine master                                                ─╯
erreur : le spécificateur de référence source master ne correspond à aucune référence
erreur : impossible de pousser des références vers 'https://github.com/swika1?tab=repositories'

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─ 1 ✘  22:39:05  ▓▒░─╮
╰─ git push -u origine main                                                  ─╯
fatal : https://github.com/swika1?tab=repositories/info/refs n'est pas valide : est-ce bien un dépôt git ?

╭─░▒▓    ~/Dow/NIT/test-git/test    main ───── 128 ✘  22:39:23  ▓▒░─╮
╰─ git push -u origine master                                                ─╯
erreur : le spécificateur de référence source master ne correspond à aucune référence
erreur : impossible de pousser des références vers 'https://github.com/swika1?tab=repositories'

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─ 1 ✘  22:40:23  ▓▒░─╮
╰─ git remote add origine https://github.com/swika1/test.git                 ─╯
erreur : la distante origine existe déjà.

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─ 3 ✘  22:40:36  ▓▒░─╮
╰─ git remote add origin https://github.com/swika1/test.git                  ─╯

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─── ✔  22:40:46  ▓▒░─╮
╰─ git push -u origine master                                                ─╯
erreur : le spécificateur de référence source master ne correspond à aucune référence
erreur : impossible de pousser des références vers 'https://github.com/swika1?tab=repositories'

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─ 1 ✘  22:40:51  ▓▒░─╮
╰─ git push -u origine main                                                  ─╯
fatal : https://github.com/swika1?tab=repositories/info/refs n'est pas valide : est-ce bien un dépôt git ?

╭─░▒▓    ~/Dow/NIT/test-git/test    main ───── 128 ✘  22:41:11  ▓▒░─╮
╰─ git remote set-url origin https://github.com/swika1/test.git              ─╯

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─── ✔  22:42:57  ▓▒░─╮
╰─ git remote -v                                                             ─╯
origin	https://github.com/swika1/test.git (fetch)
origin	https://github.com/swika1/test.git (push)
origine	https://github.com/swika1?tab=repositories (fetch)
origine	https://github.com/swika1?tab=repositories (push)

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─── ✔  22:43:13  ▓▒░─╮
╰─ git push -u origin main                                                   ─╯
la branche 'main' est paramétrée pour suivre 'origin/main'.
Everything up-to-date

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─── ✔  22:43:44  ▓▒░─╮
╰─ git pull                                                                  ─╯
Déjà à jour.

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─── ✔  22:45:18  ▓▒░─╮
╰─ git ls                                                                    ─╯
git : 'ls' n'est pas une commande git. Voir 'git --help'.

La commande la plus ressemblante est
	lfs

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─ 1 ✘  22:45:24  ▓▒░─╮
╰─ ls                                                                        ─╯
index.html style.css

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─── ✔  22:45:28  ▓▒░─╮
╰─ git status                                                                ─╯
Sur la branche main
Votre branche est à jour avec 'origin/main'.

rien à valider, la copie de travail est propre

╭─░▒▓    ~/Downloads/NIT/test-git/test    main ─── ✔  08:43:53  ▓▒░─╮
╰─ git checkout copy                                                         ─╯
Basculement sur la branche 'copy'

╭─░▒▓    ~/Downloads/NIT/test-git/test    copy ─── ✔  08:44:09  ▓▒░─╮
╰─ cd ..                                                                     ─╯

╭─░▒▓    ~/Downloads/NIT/test-git ─────────────────── ✔  08:44:17  ▓▒░─╮
╰─ cd ..                                                                     ─╯

╭─░▒▓    ~/Downloads/NIT ──────────────────────────── ✔  08:44:21  ▓▒░─╮
╰─ ls                                                                        ─╯
HACKATHON            Software Engineering machine-lurning
IHM                  arm-processor        test-git
Projet-Devlopili     compilation

╭─░▒▓    ~/Downloads/NIT ──────────────────────────── ✔  08:44:23  ▓▒░─╮
╰─ cd IHM                                                                    ─╯

╭─░▒▓    ~/Downloads/NIT/IHM ──────────────────────── ✔  08:44:28  ▓▒░─╮
╰─ ls                                                                        ─╯
flutter       ihm-poo       pyside_pject2
ask_maya.txt

╭─░▒▓    ~/Downloads/NIT/IHM ──────────────────────── ✔  08:44:29  ▓▒░─╮
commit 2663184aa79047d0a33a14a3b607954f8fdd8730 (HEAD -> stable, tag: 3.24.3, origin/stable, origin/flutter-3.24-candidate.0)
Author: Kevin Chisholm <kevinjchisholm@google.com>
Date:   Wed Sep 11 16:27:48 2024 -0500

    [flutter_releases] Flutter stable 3.24.3 Framework Cherrypicks (#155044)

    # Flutter stable 3.24.3 Framework

    ## Scheduled Cherrypicks
    - https://github.com/flutter/flutter/pull/154380
    - https://github.com/flutter/flutter/pull/154720
    - https://github.com/flutter/flutter/pull/154944

commit 6553713e4aa5f2d2fd8465de1f3e2c35f5f2bcf4
Author: Gray Mackall <34871572+gmackall@users.noreply.github.com>
Date:   Wed Sep 11 09:55:50 2024 -0700

    [CP-stable] Cherry pick "Fix `flutter build aar` for modules that use a plugin" (#154944)

    Sum of changes is:
    cherry pick of https://github.com/flutter/flutter/pull/154757
    Merge
    manual application of of https://github.com/flutter/flutter/pull/154945
    manual application of https://github.com/flutter/flutter/pull/154967

    Copied form below from automatic label (this is a cherry pick of https://git
hub.com/flutter/flutter/pull/154757).

    ### Issue Link:
    What is the link to the issue this cherry-pick is addressing?

    Fixes https://github.com/flutter/flutter/issues/154371.

    ### Changelog Description:
    Explain this cherry pick in one line that is accessible to most Flutter deve
lopers. See [best practices](https://github.com/flutter/flutter/blob/main/docs/r
eleases/Hotfix-Documentation-Best-Practices.md) for examples

    Fixes a crash when building Flutter modules for android with `flutter build
aar`, when using Android Gradle Plugin 8.0+.

    ### Impact Description:
    What is the impact (ex. visual jank on Samsung phones, app crash, cannot shi
p an iOS app)? Does it impact development (ex. flutter doctor crashes when Andro
id Studio is installed), or the shipping production app (the app crashes on laun
ch)

    Fixes the mentioned crash when building a module as an aar with Android Grad
le Plugin 8.0+.

    ### Workaround:
    Is there a workaround for this issue?

    No.

    ### Risk:
    What is the risk level of this cherry-pick?

    ### Test Coverage:
    Are you confident that your fix is well-tested by automated tests?

    ### Validation Steps:
    What are the steps to validate that this fix works?

    Build a module:
    1. `flutter create foobar --template=module`
    2. `cd foobar`
    3. Edit the `.android/build.gradle` to use AGP 8.1.
    4. `flutter run`/`flutter build aar`

commit 98ba471ea260b9868d51d10fe42cd5699f1bcb88
Author: flutteractionsbot <154381524+flutteractionsbot@users.noreply.github.com>
Date:   Wed Sep 11 09:11:14 2024 -0700

    [CP-stable]Fix `Drawer` prematurely snapping (#154720)

    ### Issue Link

    https://github.com/flutter/flutter/issues/154722

    ### Target

    stable

    ### Cherry pick PR Link

    https://github.com/flutter/flutter/pull/154720

    ### Changelog Description

    The `Drawer` widget will snap completely open or shut after being dragged mo
re than halfway.

    ### Impacted Users

    This affects everyone who has a `Drawer` widget in their mobile app.

    ### Impact Description

    Fortunately, the impact of this issue is limited to visual jank. But it will
 likely be widespread across app developers.

    ### Workaround

    There isn't a workaround for this.

    ### Risk

    low (This fix was merged over 2 weeks ago.)

    ### Test Coverage

    This fix is covered by the test added in the linked pull request.

    ### Validation Steps

    The fix can be verified by opening a mobile Flutter app and dragging a `Draw
er` open or shut.

commit 90c7ddb6677af0b71c43a73386cbff8eaeb92f47
Author: Andrew Kolos <andrewrkolos@gmail.com>
Date:   Wed Sep 11 08:45:30 2024 -0700

    [CP-stable] When shutting down chrome, guard the call to `ChromeConnection.g
etTab` (#154380)

    This is a custom hotfix patch to fix https://github.com/flutter/flutter/pull
/154366 and https://github.com/flutter/flutter/issues/153064 on the stable chann
el. The reason for a custom patch rather than a bot-created PR is that the fixes
╰─ cd ihm-poo                                                                ─╯

╭─░▒▓    ~/Downloads/NIT/IHM/ihm-poo ──────────────── ✔  08:44:39  ▓▒░─╮
╰─ ls                                                                        ─╯
__pycache__ greeting.py main.py     shaps

╭─░▒▓    ~/Downloads/NIT/IHM/ihm-poo ──────────────── ✔  08:44:40  ▓▒░─╮
╰─ cd ..                                                                     ─╯

╭─░▒▓    ~/Downloads/NIT/IHM ──────────────────────── ✔  08:44:45  ▓▒░─╮
╰─ cd flutter                                                                ─╯

╭─░▒▓    ~/Downloads/NIT/IHM/flutter    stable ─── ✔  08:44:50  ▓▒░─╮
╰─ ls                                                                        ─╯
AUTHORS               README.md             examples
CHANGELOG.md          TESTOWNERS            flutter_console.bat
CODEOWNERS            analysis_options.yaml flutter_root.iml
CODE_OF_CONDUCT.md    bin                   packages
CONTRIBUTING.md       dartdoc_options.yaml  version
LICENSE               dev
PATENT_GRANT          docs

╭─░▒▓    ~/Downloads/NIT/IHM/flutter    stable ─── ✔  08:44:51  ▓▒░─╮
╰─ git log                                                                   ─╯

╭─░▒▓    ~/Dow/N/I/flutter    stable 
╰─ git status                                                                ─╯
Sur la branche stable
Votre branche est à jour avec 'origin/stable'.

rien à valider, la copie de travail est propre

╭─░▒▓    ~/Downloads/NIT/IHM/flutter    stable ─── ✔  08:46:12  ▓▒░─╮
╰─ ls                                                                        ─╯
AUTHORS               README.md             examples
CHANGELOG.md          TESTOWNERS            flutter_console.bat
CODEOWNERS            analysis_options.yaml flutter_root.iml
CODE_OF_CONDUCT.md    bin                   packages
CONTRIBUTING.md       dartdoc_options.yaml  version
LICENSE               dev
PATENT_GRANT          docs

╭─░▒▓    ~/Downloads/NIT/IHM/flutter    stable ─── ✔  12:43:05  ▓▒░─╮
╰─ cd ..                                                                     ─╯

╭─░▒▓    ~/Downloads/NIT/IHM ──────────────────────── ✔  12:43:09  ▓▒░─╮
╰─ cd ..                                                                     ─╯

╭─░▒▓    ~/Downloads/NIT ──────────────────────────── ✔  12:43:12  ▓▒░─╮
╰─ ls                                                                        ─╯
HACKATHON            Software Engineering machine-lurning
IHM                  arm-processor        test-git
Projet-Devlopili     compilation

╭─░▒▓    ~/Downloads/NIT ──────────────────────────── ✔  12:43:14  ▓▒░─╮
╰─ cd SoftwareEngProject                                                     ─╯
cd: no such file or directory: SoftwareEngProject

╭─░▒▓    ~/Downloads/NIT ────────────────────────── 1 ✘  12:43:22  ▓▒░─╮
╰─ cd Projet-Devlopili                                                       ─╯

╭─░▒▓    ~/Downloads/NIT/Projet-Devlopili ─────────── ✔  12:43:35  ▓▒░─╮
╰─ ls                                                                        ─╯
SoftwareEngProject         features-devlopili.txt
chaier-de-charges.txt      repartition-des-taches.txt
details-projet.txt         srs.txt

╭─░▒▓    ~/Downloads/NIT/Projet-Devlopili ─────────── ✔  12:43:38  ▓▒░─╮
╰─ cd SoftwareEngProject                                                     ─╯

╭─░▒▓    ~/Dow/N/P/SoftwareEngProject    main ──── ✔  12:43:43  ▓▒░─╮
╰─ ls                                                                        ─╯
Definitions.txt        competitors.txt        features-devlopili.txt

╭─░▒▓    ~/Dow/N/P/SoftwareEngProject    main ──── ✔  12:43:48  ▓▒░─╮
╰─ cat features-devlopili.txt                                                ─╯
Main Features

4.1 Client Interface

	1.	Registration and Login:
	•	Registration form with email verification.
	•	Login with a password recovery system.
	2.	Profile Creation:
	•	Questionnaire to collect information about the client (position, previous experiences, etc.).
	•	Ability to edit profile information.
	3.	Creation of the Project Brief:
	•	Form to define the type of project (website, mobile app, desktop app).
	•	Choice of color palettes and design templates.
	•	Text field to explain the project idea.
	•	Selection of desired features (authentication, online payment, etc.).
	•	Option to add examples of similar applications.
	•	Search for applications by name with filtered results.
	4.	Developer Selection:
	•	List of available developers with their skills and experiences.
	•	Filter by programming languages and availability.
	•	Messaging feature to communicate directly with developers.
	5.	Project Management:
	•	Tracking ongoing projects and their progress.
	•	Notifications regarding the status of developer proposals.

4.2 Developer Interface

	1.	Registration and Login:
	•	Registration form with email verification.
	•	Login with a password recovery system.
	2.	Profile Creation:
	•	Questionnaire to collect information about the developer (programming languages mastered, previous projects, etc.).
	•	Ability to edit profile information.
	3.	Availability Management:
	•	Calendar to indicate availability periods for projects.
	•	Option to block specific dates.
	4.	Project Consultation:
	•	Access to the list of projects proposed by clients.
	•	Details of the project brief for each project.
	•	Ability to submit a proposal for interesting projects.
	5.	Proposal Management:
	•	Notifications for sent and received proposals.
	•	Ability to accept or decline proposals.
  UW PICO 5.09                           New Buffer





















                               [ Read 59 lines ]
^G Get Help  ^O WriteOut  ^R Read File ^Y Prev Pg   ^K Cut Text  ^C Cur Pos
^X Exit      ^J Justify   ^W Where is  ^V Next Pg   ^U UnCut Text^T To Spell
  UW PICO 5.09                  File: features-devlopili.txt

Main Features

4.1 Client Interface

        1.      Registration and Login:
        •       Registration form with email verification.
        •       Login with a password recovery system.
        2.      Profile Creation:
        •       Questionnaire to collect information about the client (position$
        •       Ability to edit profile information.
        3.      Creation of the Project Brief:
        •       Form to define the type of project (website, mobile app, deskto$
        •       Choice of color palettes and design templates.
        •       Text field to explain the project idea.
        •       Selection of desired features (authentication, online payment, $
        •       Option to add examples of similar applications.
        •       Search for applications by name with filtered results.
        4.      Developer Selection:
        •       List of available developers with their skills and experiences.
        •       Filter by programming languages and availability.

^G Get Help  ^O WriteOut  ^R Read File ^Y Prev Pg   ^K Cut Text  ^C Cur Pos
^X Exit      ^J Justify   ^W Where is  ^V Next Pg   ^U UnCut Text^T To SpellMain Features

4.1 Client Interface

	1.	Registration and Login:
	•	Registration form with email verification.
	•	Login with a password recovery system.
	2.	Profile Creation:
	•	Questionnaire to collect information about the client (position, previous experiences, etc.).
	•	Ability to edit profile information.
	3.	Creation of the Project Brief:
	•	Form to define the type of project (website, mobile app, desktop app).
	•	Choice of color palettes and design templates.
	•	Text field to explain the project idea.
	•	Selection of desired features (authentication, online payment, etc.).
	•	Option to add examples of similar applications.
	•	Search for applications by name with filtered results.
	4.	Developer Selection:
	•	List of available developers with their skills and experiences.
	•	Filter by programming languages and availability.
	•	Messaging feature to communicate directly with developers.
	5.	Project Management:
	•	Tracking ongoing projects and their progress.
	•	Notifications regarding the status of developer proposals.

4.2 Developer Interface

	1.	Registration and Login:
	•	Registration form with email verification.
	•	Login with a password recovery system.
	2.	Profile Creation:
	•	Questionnaire to collect information about the developer (programming languages mastered, previous projects, etc.).
	•	Ability to edit profile information.
	3.	Availability Management:
	•	Calendar to indicate availability periods for projects.
	•	Option to block specific dates.
	4.	Project Consultation:
	•	Access to the list of projects proposed by clients.
	•	Details of the project brief for each project.
	•	Ability to submit a proposal for interesting projects.
	5.	Proposal Management:
	•	Notifications for sent and received proposals.
	•	Ability to accept or decline proposals.

4.3 Common Features

	1.	Integrated Messaging:
	•	Secure messaging system to facilitate communication between clients and developers.
	2.	Notifications:
	•	Real-time notifications for messages, project proposals, and updates on project statuses.
	3.	Evaluation and Comments:
	•	Rating system allowing clients and developers to leave comments on their collaboration.
	•	Display of ratings in user profiles.
	4.	Security and Privacy:
	•	Protection of users’ personal data with appropriate security measures.
	•	Clearly displayed privacy policy.
	5.	Search Bar:
	•	A search bar for clients and developers to quickly find specific projects, features, or developers based on keywords.

