Software Requirements Specification (SRS)

1. Introduction

1.1 Purpose

This SRS document describes the functional and non-functional requirements for a web application that connects clients with developers to manage software projects. It outlines the user interfaces, system features, and external dependencies needed to create a successful collaboration platform. The application will enable clients to create and manage multiple projects, choose developers, and confirm contracts based on predefined terms, including the delivery of the project, pricing, and maintenance agreements.

1.2 Scope

The application will be used by two main user types:

	•	Clients: Users who want to create software projects (websites, mobile applications, desktop software).
	•	Developers: Software professionals offering their services to develop and deliver these projects.
The system will facilitate project creation, contract negotiations, and management of project milestones, as well as handle maintenance and support post-delivery.

2. Overall Description

2.1 Product Perspective

The product will serve as an intermediary platform between clients and developers. Clients will be able to create detailed project specifications, find developers, and finalize contracts that include pricing, deadlines, and post-delivery maintenance options. Developers will be able to propose their services, communicate with clients, and deliver the agreed-upon projects.

3. System Features

3.1 Client Interface

3.1.1 Registration and Login

	•	Description: Clients must register and verify their email to access the platform. A login system with password recovery functionality will be provided.
	•	Functional Requirements:
	1.	Clients can sign up with email and password.
	2.	Email verification is required after registration.
	3.	Password recovery option via email.

3.1.2 Profile Creation

	•	Description: Clients will fill out a questionnaire to create their profile, providing information such as their role, prior experiences, and project interests.
	•	Functional Requirements:
	1.	Clients can edit their profile information.
	2.	Information collected will be used to personalize project suggestions.

3.1.3 Multiple Project Creation

	•	Description: Clients can create multiple projects and track both current and future projects in an interface designed for this purpose.
	•	Functional Requirements:
	1.	Clients can create a new project by specifying the project type (website, mobile app, desktop app).
	2.	Clients can store and view details of both completed and upcoming projects.
	3.	Each project will be linked to a questionnaire to help define the project specifications.
	4.	Clients can define the functional requirements, such as authentication, online payments, etc.

3.1.4 Questionnaire for Project Specifications (Cahier des Charges)

	•	Description: A detailed form will help the client define their project specifications, from design preferences to required functionalities.
	•	Functional Requirements:
	1.	The form will include options for project type, color schemes, and design templates.
	2.	Clients can specify project ideas in a free-text field.
	3.	Functionalities such as authentication, payment integration, etc., can be selected from a list.
	4.	Clients can upload examples of similar applications for reference.
	5.	Search Bar: Clients can search for existing applications by name to find references and filter results based on relevance.

3.1.5 Developer Selection and Contract Confirmation

	•	Description: Clients can browse developers, filter by skills, and initiate a contract process after communication.
	•	Functional Requirements:
	1.	Developer Filtering: Clients can filter developers by skills, programming languages, and availability.
	2.	Messaging System: Clients can directly communicate with developers via an integrated messaging system.
	3.	Contract Confirmation: Once an agreement is reached, clients can confirm the contract, which includes:
	•	Price Confirmation: The price must be within the range defined in the project specifications.
	•	Deadline Agreement: Both parties agree on a final deadline.
	•	Deliverables: Clients choose whether to receive just the application (executable) or the complete source code.
	•	Admin Rights: Clients can specify if they require admin rights to modify or manage the application after delivery.
	•	Maintenance: Clients and developers agree on post-delivery maintenance options:
	•	No maintenance.
	•	Occasional maintenance (for fixes or changes).
	•	Continuous maintenance (with a contract specifying frequency and cost).
	4.	Contract Summary: A summary of the contract, including price, deadline, deliverables, admin rights, and maintenance agreement, is generated and sent to both parties.

3.2 Developer Interface

3.2.1 Registration and Login

	•	Description: Developers must register and verify their email to access the platform. A login system with password recovery functionality will be provided.
	•	Functional Requirements:
	1.	Developers can sign up with email and password.
	2.	Email verification is required after registration.
	3.	Password recovery option via email.

3.2.2 Profile Creation

	•	Description: Developers will fill out a questionnaire to create their profile, providing information such as programming languages, prior projects, and availability.
	•	Functional Requirements:
	1.	Developers can edit their profile information.
	2.	Profile details will be used to match them with suitable projects.

3.2.3 Availability Management

	•	Description: Developers can manage their availability by setting time blocks during which they are open to taking on projects.
	•	Functional Requirements:
	1.	Developers can use a calendar to indicate available periods.
	2.	Developers can block specific dates for personal time.

3.2.4 Project Browsing and Proposal Submission

	•	Description: Developers can browse available projects and submit proposals to clients.
	•	Functional Requirements:
	1.	Developers can view detailed project specifications.
	2.	Developers can submit proposals for projects that match their skills.
	3.	Notifications are sent to developers when a client accepts or rejects a proposal.

3.2.5 Contract Confirmation

	•	Description: Developers can confirm contracts after communicating with clients, including agreeing on price, deadlines, and other project details.
	•	Functional Requirements:
	1.	Price and Deadline Confirmation: Developers confirm the final price and deadline.
	2.	Deliverables Agreement: Developers agree on whether they will provide just the application or the complete source code.
	3.	Admin Rights: Developers can confirm whether the client will receive admin rights.
	4.	Maintenance Agreement: Developers can offer maintenance options and set terms for occasional or continuous support.

3.3 Common Features

3.3.1 Integrated Messaging

	•	Description: A secure messaging system will facilitate communication between clients and developers.
	•	Functional Requirements:
	1.	Both parties can exchange messages securely within the platform.
	2.	Notifications are sent for new messages.

3.3.2 Notifications

	•	Description: Real-time notifications for important updates, such as messages, contract confirmations, and project updates.
	•	Functional Requirements:
	1.	Clients and developers receive notifications for all relevant updates.

3.3.3 Reviews and Ratings

	•	Description: After completing a project, both clients and developers can leave reviews and ratings.
	•	Functional Requirements:
	1.	Reviews and ratings are displayed on user profiles.

3.3.4 Security and Privacy

	•	Description: The platform ensures data privacy and security for all users.
	•	Functional Requirements:
	1.	All data is securely stored and encrypted.
	2.	A clear privacy policy is available to users.

3.3.5 Contract Summary and Digital Signature

	•	Description: After confirming a contract, both parties receive a digital summary, including all agreed-upon terms.
	•	Functional Requirements:
	1.	A digital signature will be required to finalize the contract.
	2.	A PDF copy of the contract is sent to both the client and developer.

4. Non-Functional Requirements

4.1 Performance

The system should support high traffic and handle multiple users simultaneously without performance degradation.

4.2 Security

Data encryption, secure login mechanisms, and regular security audits will be implemented to protect user data.

4.3 Usability

The interface must be intuitive, with clear navigation for both clients and developers. The project creation process should be straightforward, and the messaging system should be easy to use.
